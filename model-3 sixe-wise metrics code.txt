!pip install ultralytics

from google.colab import drive
drive.mount('/content/drive')

!unzip -q "/content/drive/MyDrive/dataset1_trained_model.zip" -d /content/

!unzip -q "/content/drive/MyDrive/dataset1.zip" -d /content/

yaml_content = """
path: /content/dataset1
train: images/train
val: images/val
test: images/test

names:
  0: drone
"""

with open("/content/data.yaml", "w") as f:
    f.write(yaml_content)

from ultralytics import YOLO

model = YOLO("/content/content/drive/MyDrive/YOLODronedataset1/runs/detect/train2/weights/best.pt")

metrics = model.val(
    data="/content/data.yaml",
    split="test",
    conf=0.01,
    save=True,
    save_txt=True,
    save_conf=True
)

!ls /content/runs/detect/val*/labels | wc -l
!head /content/runs/detect/val*/labels/00001.txt

import os
import numpy as np
from collections import defaultdict

IMAGE_WIDTH = 1280
IMAGE_HEIGHT = 720
IOU_THRESHOLD = 0.5

gt_dir = "/content/dataset1/labels/test"
pred_dir = "/content/runs/detect/val/labels"

def categorize_size(w, h):
    area = w * h
    if area < 32*32:
        return "small"
    elif area < 96*96:
        return "medium"
    else:
        return "large"

def yolo_to_bbox(xc, yc, w, h):
    bw = w * IMAGE_WIDTH
    bh = h * IMAGE_HEIGHT
    cx = xc * IMAGE_WIDTH
    cy = yc * IMAGE_HEIGHT
    x1 = cx - bw/2
    y1 = cy - bh/2
    x2 = cx + bw/2
    y2 = cy + bh/2
    return [x1, y1, x2, y2]

def compute_iou(box1, box2):
    xi1 = max(box1[0], box2[0])
    yi1 = max(box1[1], box2[1])
    xi2 = min(box1[2], box2[2])
    yi2 = min(box1[3], box2[3])
    inter_area = max(0, xi2 - xi1) * max(0, yi2 - yi1)
    box1_area = (box1[2]-box1[0]) * (box1[3]-box1[1])
    box2_area = (box2[2]-box2[0]) * (box2[3]-box2[1])
    union_area = box1_area + box2_area - inter_area
    return inter_area / union_area if union_area > 0 else 0

stats = {"small": [], "medium": [], "large": []}
all_sizes = ["small", "medium", "large"]

for file in os.listdir(gt_dir):
    if not file.endswith(".txt"):
        continue

    gt_boxes = []
    with open(os.path.join(gt_dir, file), "r") as f:
        for line in f:
            cls, xc, yc, w, h = map(float, line.strip().split())
            bbox = yolo_to_bbox(xc, yc, w, h)
            size = categorize_size(w * IMAGE_WIDTH, h * IMAGE_HEIGHT)
            gt_boxes.append((bbox, size))

    pred_path = os.path.join(pred_dir, file)
    pred_boxes = []
    if os.path.exists(pred_path):
        with open(pred_path, "r") as f:
            for line in f:
                parts = line.strip().split()
                if len(parts) == 6:
                    cls, xc, yc, w, h, conf = map(float, parts)
                else:
                    continue
                bbox = yolo_to_bbox(xc, yc, w, h)
                size = categorize_size(w * IMAGE_WIDTH, h * IMAGE_HEIGHT)
                pred_boxes.append((bbox, size, conf))

    matched_gt = set()
    for pred_box, size, conf in sorted(pred_boxes, key=lambda x: -x[2]):
        best_iou = 0
        best_idx = -1
        for idx, (gt_box, gt_size) in enumerate(gt_boxes):
            if idx in matched_gt or gt_size != size:
                continue
            iou = compute_iou(pred_box, gt_box)
            if iou > best_iou:
                best_iou = iou
                best_idx = idx
        if best_iou >= IOU_THRESHOLD:
            stats[size].append((1, conf)) 
            matched_gt.add(best_idx)
        else:
            stats[size].append((0, conf))  

    for idx, (gt_box, size) in enumerate(gt_boxes):
        if idx not in matched_gt:
            stats[size].append((None, None)) 

def compute_map(stats_list):
    tp_conf = [conf for label, conf in stats_list if label == 1]
    fp_conf = [conf for label, conf in stats_list if label == 0]
    n_gt = sum(1 for label, conf in stats_list if label is not None and label != 0)
    if n_gt == 0:
        return 0.0
    scores = [(label, conf) for label, conf in stats_list if label in [0, 1]]
    scores.sort(key=lambda x: -x[1])
    tp, fp = 0, 0
    precisions = []
    recalls = []
    for label, _ in scores:
        if label == 1:
            tp += 1
        else:
            fp += 1
        precisions.append(tp / (tp + fp))
        recalls.append(tp / n_gt)

    ap = 0.0
    prev_r = 0.0
    for p, r in zip(precisions, recalls):
        ap += p * (r - prev_r)
        prev_r = r
    return round(ap, 3)

for size in all_sizes:
    ap = compute_map(stats[size])
    print(f"mAP@0.5 for {size}: {ap}")

metrics = model.val(
    data="/content/data.yaml",
    split="test",
    conf=0.01,
    save=True,
    save_txt=True,
    save_conf=True
)

import os
import numpy as np

IMAGE_WIDTH = 1280
IMAGE_HEIGHT = 720
IOU_THRESHOLD = 0.5  

gt_dir = "/content/dataset1/labels/test"
pred_dir = "/content/runs/detect/val2/labels"  

def categorize_size(w, h):
    area = w * h
    if area < 32 * 32:
        return "small"
    elif area < 96 * 96:
        return "medium"
    else:
        return "large"

def yolo_to_bbox(xc, yc, w, h):
    bw = w * IMAGE_WIDTH
    bh = h * IMAGE_HEIGHT
    cx = xc * IMAGE_WIDTH
    cy = yc * IMAGE_HEIGHT
    x1 = cx - bw / 2
    y1 = cy - bh / 2
    x2 = cx + bw / 2
    y2 = cy + bh / 2
    return [x1, y1, x2, y2]

def compute_iou(box1, box2):
    xi1 = max(box1[0], box2[0])
    yi1 = max(box1[1], box2[1])
    xi2 = min(box1[2], box2[2])
    yi2 = min(box1[3], box2[3])
    inter_area = max(0, xi2 - xi1) * max(0, yi2 - yi1)
    box1_area = (box1[2] - box1[0]) * (box1[3] - box1[1])
    box2_area = (box2[2] - box2[0]) * (box2[3] - box2[1])
    union_area = box1_area + box2_area - inter_area
    return inter_area / union_area if union_area > 0 else 0

stats = {"small": [], "medium": [], "large": []}
all_sizes = ["small", "medium", "large"]

for file in os.listdir(gt_dir):
    if not file.endswith(".txt"):
        continue

    gt_boxes = []
    with open(os.path.join(gt_dir, file), "r") as f:
        for line in f:
            cls, xc, yc, w, h = map(float, line.strip().split())
            bbox = yolo_to_bbox(xc, yc, w, h)
            size = categorize_size(w * IMAGE_WIDTH, h * IMAGE_HEIGHT)
            gt_boxes.append((bbox, size))

    pred_boxes = []
    pred_path = os.path.join(pred_dir, file)
    if os.path.exists(pred_path):
        with open(pred_path, "r") as f:
            for line in f:
                parts = line.strip().split()
                if len(parts) != 6:
                    continue
                cls, xc, yc, w, h, conf = map(float, parts)
                if int(cls) != 0:
                    continue
                bbox = yolo_to_bbox(xc, yc, w, h)
                pred_boxes.append((bbox, conf))

    matched_gt = set()
    for pred_box, conf in sorted(pred_boxes, key=lambda x: -x[1]):
        best_iou = 0
        best_idx = -1
        for idx, (gt_box, gt_size) in enumerate(gt_boxes):
            if idx in matched_gt:
                continue
            iou = compute_iou(pred_box, gt_box)
            if iou > best_iou:
                best_iou = iou
                best_idx = idx
        if best_iou >= IOU_THRESHOLD:
            matched_gt.add(best_idx)
            _, size = gt_boxes[best_idx]
            stats[size].append((1, conf)) 
        else:
            for size in all_sizes:
                stats[size].append((0, conf)) 

    for idx, (_, size) in enumerate(gt_boxes):
        if idx not in matched_gt:
            stats[size].append((None, None))  

def compute_map(stats_list):
    scores = [(label, conf) for label, conf in stats_list if label in [0, 1]]
    scores.sort(key=lambda x: -x[1])
    n_gt = sum(1 for label, _ in stats_list if label == 1)

    if n_gt == 0:
        return 0.0

    tp = 0
    fp = 0
    precisions = []
    recalls = []
    for label, _ in scores:
        if label == 1:
            tp += 1
        else:
            fp += 1
        precisions.append(tp / (tp + fp))
        recalls.append(tp / n_gt)

    ap = 0.0
    prev_r = 0.0
    for p, r in zip(precisions, recalls):
        ap += p * (r - prev_r)
        prev_r = r
    return round(ap, 3)

for size in all_sizes:
    ap = compute_map(stats[size])
    total = len(stats[size])
    tp = sum(1 for x in stats[size] if x[0] == 1)
    fp = sum(1 for x in stats[size] if x[0] == 0)
    fn = sum(1 for x in stats[size] if x[0] is None)
    print(f"{size.upper()} â€” TP: {tp}, FP: {fp}, FN: {fn}, Total: {total}, mAP@0.5: {ap}")

!head /content/dataset1/labels/test/00001.txt

!head /content/runs/detect/val2/labels/00001.txt

metrics = model.val(
    data="/content/data.yaml",
    split="test",
    conf=0.25,     
    save=True,
    save_txt=True,
    save_conf=True
)

import os
from collections import defaultdict

IMAGE_WIDTH = 1280
IMAGE_HEIGHT = 720
IOU_THRESHOLD = 0.5

gt_dir = "/content/dataset1/labels/test"
pred_dir = "/content/runs/detect/val3/labels"

def categorize_size(w, h):
    area = w * h
    if area < 32 * 32:
        return "small"
    elif area < 96 * 96:
        return "medium"
    else:
        return "large"

def yolo_to_bbox(xc, yc, w, h):
    bw = w * IMAGE_WIDTH
    bh = h * IMAGE_HEIGHT
    cx = xc * IMAGE_WIDTH
    cy = yc * IMAGE_HEIGHT
    x1 = cx - bw / 2
    y1 = cy - bh / 2
    x2 = cx + bw / 2
    y2 = cy + bh / 2
    return [x1, y1, x2, y2]

def compute_iou(box1, box2):
    xi1 = max(box1[0], box2[0])
    yi1 = max(box1[1], box2[1])
    xi2 = min(box1[2], box2[2])
    yi2 = min(box1[3], box2[3])
    inter_area = max(0, xi2 - xi1) * max(0, yi2 - yi1)
    box1_area = (box1[2]-box1[0]) * (box1[3]-box1[1])
    box2_area = (box2[2]-box2[0]) * (box2[3]-box2[1])
    union_area = box1_area + box2_area - inter_area
    return inter_area / union_area if union_area > 0 else 0

stats = {"small": [], "medium": [], "large": []}
counters = {sz: {"TP": 0, "FP": 0, "FN": 0} for sz in stats}

for file in os.listdir(gt_dir):
    if not file.endswith(".txt"):
        continue

    gt_boxes = []
    with open(os.path.join(gt_dir, file), "r") as f:
        for line in f:
            cls, xc, yc, w, h = map(float, line.strip().split())
            bbox = yolo_to_bbox(xc, yc, w, h)
            size = categorize_size(w * IMAGE_WIDTH, h * IMAGE_HEIGHT)
            gt_boxes.append((bbox, size))

    pred_boxes = []
    pred_path = os.path.join(pred_dir, file)
    if os.path.exists(pred_path):
        with open(pred_path, "r") as f:
            for line in f:
                parts = line.strip().split()
                if len(parts) == 6:
                    cls, xc, yc, w, h, conf = map(float, parts)
                    bbox = yolo_to_bbox(xc, yc, w, h)
                    size = categorize_size(w * IMAGE_WIDTH, h * IMAGE_HEIGHT)
                    pred_boxes.append((bbox, size, conf))

    matched_gt = set()
    for pred_box, size, conf in sorted(pred_boxes, key=lambda x: -x[2]):
        best_iou = 0
        best_idx = -1
        for idx, (gt_box, gt_size) in enumerate(gt_boxes):
            if idx in matched_gt or gt_size != size:
                continue
            iou = compute_iou(pred_box, gt_box)
            if iou > best_iou:
                best_iou = iou
                best_idx = idx
        if best_iou >= IOU_THRESHOLD:
            stats[size].append((1, conf))
            counters[size]["TP"] += 1
            matched_gt.add(best_idx)
        else:
            stats[size].append((0, conf))
            counters[size]["FP"] += 1

    for idx, (gt_box, size) in enumerate(gt_boxes):
        if idx not in matched_gt:
            counters[size]["FN"] += 1

def compute_map(stats_list):
    scores = [(label, conf) for label, conf in stats_list if label is not None]
    scores.sort(key=lambda x: -x[1])
    tp = 0
    fp = 0
    precisions = []
    recalls = []
    n_gt = sum(1 for label, _ in stats_list if label == 1)
    if n_gt == 0:
        return 0.0
    for label, _ in scores:
        if label == 1:
            tp += 1
        else:
            fp += 1
        precisions.append(tp / (tp + fp))
        recalls.append(tp / n_gt)
    ap = 0.0
    prev_r = 0.0
    for p, r in zip(precisions, recalls):
        ap += p * (r - prev_r)
        prev_r = r
    return round(ap, 3)

for size in ["small", "medium", "large"]:
    TP = counters[size]["TP"]
    FP = counters[size]["FP"]
    FN = counters[size]["FN"]
    precision = TP / (TP + FP) if (TP + FP) > 0 else 0
    recall = TP / (TP + FN) if (TP + FN) > 0 else 0
    ap = compute_map(stats[size])
    print(f"\n{size.upper()} â€” TP: {TP}, FP: {FP}, FN: {FN}")
    print(f"Precision: {round(precision, 3)}, Recall: {round(recall, 3)}, mAP@0.5: {ap}")

from IPython.display import Image, display
import glob

pred_img_dir = "/content/runs/detect/val3"
sample_preds = sorted(glob.glob(pred_img_dir + "/*.jpg"))[:5]

for path in sample_preds:
    display(Image(filename=path))

metrics = model.val(data="/content/data.yaml", split="test", save=True, save_txt=True, save_conf=True)

import os
import numpy as np

gt_dir = "/content/dataset1/labels/test"
pred_dir = "/content/runs/detect/val4/labels"
IMAGE_WIDTH = 1280
IMAGE_HEIGHT = 720
IOU_THRESHOLD = 0.5

def categorize_size(w, h):
    area = w * h
    if area < 32**2:
        return "small"
    elif area < 96**2:
        return "medium"
    else:
        return "large"

def yolo_to_bbox(xc, yc, w, h):
    bw = w * IMAGE_WIDTH
    bh = h * IMAGE_HEIGHT
    cx = xc * IMAGE_WIDTH
    cy = yc * IMAGE_HEIGHT
    return [cx - bw / 2, cy - bh / 2, cx + bw / 2, cy + bh / 2]

def compute_iou(box1, box2):
    xi1, yi1 = max(box1[0], box2[0]), max(box1[1], box2[1])
    xi2, yi2 = min(box1[2], box2[2]), min(box1[3], box2[3])
    inter_area = max(0, xi2 - xi1) * max(0, yi2 - yi1)
    box1_area = (box1[2] - box1[0]) * (box1[3] - box1[1])
    box2_area = (box2[2] - box2[0]) * (box2[3] - box2[1])
    union_area = box1_area + box2_area - inter_area
    return inter_area / union_area if union_area > 0 else 0

stats = {"small": [], "medium": [], "large": []}
for file in os.listdir(gt_dir):
    if not file.endswith(".txt"):
        continue
    gt_boxes = []
    with open(os.path.join(gt_dir, file)) as f:
        for line in f:
            cls, xc, yc, w, h = map(float, line.strip().split())
            bbox = yolo_to_bbox(xc, yc, w, h)
            size = categorize_size(w * IMAGE_WIDTH, h * IMAGE_HEIGHT)
            gt_boxes.append((bbox, size))

    pred_boxes = []
    pred_file = os.path.join(pred_dir, file)
    if os.path.exists(pred_file):
        with open(pred_file) as f:
            for line in f:
                parts = line.strip().split()
                if len(parts) == 6:
                    cls, xc, yc, w, h, conf = map(float, parts)
                    bbox = yolo_to_bbox(xc, yc, w, h)
                    size = categorize_size(w * IMAGE_WIDTH, h * IMAGE_HEIGHT)
                    pred_boxes.append((bbox, size, conf))

    matched_gt = set()
    for pred_box, pred_size, conf in sorted(pred_boxes, key=lambda x: -x[2]):
        best_iou, best_idx = 0, -1
        for idx, (gt_box, gt_size) in enumerate(gt_boxes):
            if idx in matched_gt or gt_size != pred_size:
                continue
            iou = compute_iou(pred_box, gt_box)
            if iou > best_iou:
                best_iou, best_idx = iou, idx
        if best_iou >= IOU_THRESHOLD:
            stats[pred_size].append((1, conf))  
            matched_gt.add(best_idx)
        else:
            stats[pred_size].append((0, conf))

    for idx, (gt_box, size) in enumerate(gt_boxes):
        if idx not in matched_gt:
            stats[size].append((None, None)) 

def compute_map(stat_list):
    scores = [(label, conf) for label, conf in stat_list if label in [0, 1]]
    scores.sort(key=lambda x: -x[1])
    tp, fp = 0, 0
    n_gt = sum(1 for label, _ in stat_list if label == 1 or label is None)
    precisions, recalls = [], []

    for label, _ in scores:
        if label == 1:
            tp += 1
        else:
            fp += 1
        precisions.append(tp / (tp + fp))
        recalls.append(tp / n_gt if n_gt else 0)

    ap, prev_r = 0.0, 0.0
    for p, r in zip(precisions, recalls):
        ap += p * (r - prev_r)
        prev_r = r
    return round(ap, 3)

for size in ["small", "medium", "large"]:
    tps = sum(1 for x, _ in stats[size] if x == 1)
    fps = sum(1 for x, _ in stats[size] if x == 0)
    fns = sum(1 for x, _ in stats[size] if x is None)
    precision = round(tps / (tps + fps), 3) if tps + fps > 0 else 0.0
    recall = round(tps / (tps + fns), 3) if tps + fns > 0 else 0.0
    ap = compute_map(stats[size])

    print(f"\n {size.upper()} â€” TP: {tps}, FP: {fps}, FN: {fns}")
    print(f"Precision: {precision}, Recall: {recall}, mAP@0.5: {ap}")

